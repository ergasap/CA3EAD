@page "/fetchdata"
@inject HttpClient Http

<h1>Crypto prices</h1>

<p>This component will let you know the price of the coins with pairs.</p>

@if (pairs == null)
{
    <p><em>Loading...</em></p>
}
else
{


    <div class="row">
        <div class="col">
            <label>Base</label>
            <select class="custom-select custom-select-sm">
                <option selected>Open this select menu</option>

                @foreach (var p in allbases)
                {
                    <option value="@p">@p</option>
                }

            </select>
        </div>

        <div class="col">
            <label>Quote</label>
            <select class="custom-select custom-select-sm">
                <option selected>Open this select menu</option>

                @foreach (var q in allquotes)
                {
                    <option value="@q">@q</option>
                }

            </select>
        </div>

        <div class="col mt-4">
            <button class="btn btn-primary">Click me</button>
        </div>

    </div>


}

@code {
    private Pairs[] pairs;
    private Cost[] cost;
    private List<String> allbases;
    private List<String> allquotes;

    protected override async Task OnInitializedAsync()
    {

        //https://api.n.exchange/en/api/v1/pair/
        //"sample-data/weather.json"
        pairs = await Http.GetFromJsonAsync<Pairs[]>("https://api.n.exchange/en/api/v1/pair/");
        //cost = await Http.GetFromJsonAsync<Cost[]>("https://api.n.exchange/en/api/v1/get_price/BTCLTC/");


        foreach (var p in pairs) {
            Console.WriteLine(p.Name);
            Console.WriteLine(p.Base);
            Console.WriteLine(p.Quote);
        }


        allbases = new List<String>();
        allBase();
        Console.WriteLine(allbases.Count);

        allquotes = new List<String>();
        allQuote();
        Console.WriteLine(allquotes.Count);
    }

    public class Pairs
    {
        public string Name { get; set; }
        public string @Base { get; set; }
        public string Quote { get; set; }
        public string Fee_ask { get; set; }
        public string Fee_bid { get; set; }
        public bool Disabled { get; set; }
        public bool Test_mode { get; set; }
        public bool Orderbook_enabled { get; set; }
        public bool Reverse_orderbook_enabled { get; set; }
    }

    public class Pair
    {
        public string @Base { get; set; }
        public string Quote { get; set; }
    }

    public class Cost
    {
        public double Amount_base { get; set; }
        public double Amount_quote { get; set; }
        public double Timestamp { get; set; }
        public double Price { get; set; }
        public Pair Pair { get; set; }
        public double Max_amount_base { get; set; }
        public double Max_amount_quote { get; set; }
        public double Min_amount_base { get; set; }
        public double Min_amount_quote { get; set; }
    }

    public void allBase() {

        for (int j = 0; j < pairs.Length; j++) {
            if (allbases.Count == 0)
            {
                allbases.Add(pairs[j].Base);
            }
            else
            {
                bool flag = true;
                for (int i = 0; i < allbases.Count; i++)
                {
                    if (pairs[j].Base == allbases[i])
                    {
                        flag = false;
                    }
                }
                if (flag) { allbases.Add(pairs[j].Base); }
            }
        }
        Console.WriteLine("These are all bases");
        for (int i = 0; i < allbases.Count; i++) {
            Console.WriteLine(allbases[i]);
        }
    }

    public void allQuote()
    {
        for (int j = 0; j < pairs.Length; j++)
        {
            if (allquotes.Count == 0)
            {
                allquotes.Add(pairs[j].Quote);
            }
            else
            {
                bool flag = true;
                for (int i = 0; i < allquotes.Count; i++)
                {

                    if (pairs[j].Quote == allquotes[i])
                    {
                        flag = false;
                    }
                }
                if (flag) { allquotes.Add(pairs[j].Quote); }
            }
        }
        Console.WriteLine("These are all quotes");
        for (int i = 0; i < allquotes.Count; i++)
        {
            Console.WriteLine(allquotes[i]);
        }
    }
}
