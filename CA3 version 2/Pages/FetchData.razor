@page "/fetchdata"
@inject HttpClient Http

<h1>Crypto prices</h1>

<p>
    This component will let you know the price of some cryptocurrency pairs thanks to n.exchange api.
</p>
<p>
    Cryptocurrency pairs are assets that can be traded for each other
    on an exchange  — for example Bitcoin/Litecoin (BTC/LTC) and Ethereum/Bitcoin Cash (ETH/BCH).
    Trading pairs lets you compare costs between different cryptocurrencies.
</p>

@if (pairs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col">
            <label>Base</label>
            <select class="custom-select custom-select-sm" @bind="@selectedBase">
                <option selected>Open this select menu</option>

                @foreach (var p in allbases)
                {
                    <option value="@p">@p</option>
                }

            </select>
        </div>

        <div class="col">
            <label>Quote</label>
            <select class="custom-select custom-select-sm" @bind="@selectedQuote">
                <option selected>Open this select menu</option>

                @foreach (var q in allquotes)
                {
                    <option value="@q">@q</option>
                }

            </select>
        </div>

        <div class="col mt-4">
            <button class="btn btn-primary" @onclick=getPrice>Get pair price</button>
        </div>

    </div>

    <div class="row">
        <div class="col">
            <label>@errorLabel</label>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <label>@price</label>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <label>@explanation</label>
        </div>
    </div>

}

@code {
    private Pairs[] pairs;
    private Cost cost;
    private List<String> allbases;
    private List<String> allquotes;
    private string selectedBase;
    private string selectedQuote;
    private string errorLabel;
    private string price;
    private string explanation;

    protected override async Task OnInitializedAsync()
    {

        pairs = await Http.GetFromJsonAsync<Pairs[]>("https://api.n.exchange/en/api/v1/pair/");

        errorLabel = "";
        price = "";

        allbases = new List<String>();
        allBase();

        allquotes = new List<String>();
        allQuote();

    }

    public class Pairs
    {
        public string Name { get; set; }
        public string @Base { get; set; }
        public string Quote { get; set; }
        public string Fee_ask { get; set; }
        public string Fee_bid { get; set; }
        public bool Disabled { get; set; }
        public bool Test_mode { get; set; }
        public bool Orderbook_enabled { get; set; }
        public bool Reverse_orderbook_enabled { get; set; }
    }

    public class Pair
    {
        public string @Base { get; set; }
        public string Quote { get; set; }
    }

    public class Cost
    {
        public double Amount_base { get; set; }
        public double Amount_quote { get; set; }
        public double Timestamp { get; set; }
        public double Price { get; set; }
        public Pair Pair { get; set; }
        public double Max_amount_base { get; set; }
        public double Max_amount_quote { get; set; }
        public double Min_amount_base { get; set; }
        public double Min_amount_quote { get; set; }
    }

    public void allBase()
    {

        for (int j = 0; j < pairs.Length; j++)
        {
            if (allbases.Count == 0)
            {
                allbases.Add(pairs[j].Base);
            }
            else
            {
                bool flag = true;
                for (int i = 0; i < allbases.Count; i++)
                {
                    if (pairs[j].Base == allbases[i])
                    {
                        flag = false;
                    }
                }
                if (flag) { allbases.Add(pairs[j].Base); }
            }
        }

    }

    public void allQuote()
    {
        for (int j = 0; j < pairs.Length; j++)
        {
            if (allquotes.Count == 0)
            {
                allquotes.Add(pairs[j].Quote);
            }
            else
            {
                bool flag = true;
                for (int i = 0; i < allquotes.Count; i++)
                {

                    if (pairs[j].Quote == allquotes[i])
                    {
                        flag = false;
                    }
                }
                if (flag) { allquotes.Add(pairs[j].Quote); }
            }
        }

    }

    public async Task getPrice()
    {


        if (selectedBase == null || selectedQuote == null)
        {
            errorLabel = "You must select a Base and a Quote before getting the price";
        }
        else
        {
            string url = "https://api.n.exchange/en/api/v1/get_price/" + selectedBase + selectedQuote + "/";
            cost = await Http.GetFromJsonAsync<Cost>(url);
            price = "The price of the selected pair is: " + cost.Price.ToString() + ".";
            explanation = "This means that to buy one " + selectedBase + " coin, you must spend " + cost.Price.ToString() + " " + selectedQuote + ".";
        }



    }

}
